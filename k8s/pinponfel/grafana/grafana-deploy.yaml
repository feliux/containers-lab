apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
    spec:
      restartPolicy: Always
      securityContext:
        fsGroup: 472
        supplementalGroups:
        - 0  
      containers:
      - name: grafana
        image: grafana/grafana:8.0.4
        imagePullPolicy: IfNotPresent
        ports:
        - name: grafana
          containerPort: 3000
      # resources:
      #   limits:
      #     memory: "1Gi"
      #     cpu: "1000m"
      #   requests: 
      #     memory: 250Mi
      #     cpu: 250m
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /robots.txt
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 2
        envFrom:
          - configMapRef:
              name: grafana-envs
        env:
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: grafana-secrets
                key: GF_SECURITY_ADMIN_USER
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: grafana-secrets
                key: GF_SECURITY_ADMIN_PASSWORD
          - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: grafana-secrets
                key: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
        volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-storage
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasources
            readOnly: true
          - mountPath: /etc/grafana/provisioning/dashboards
            name: grafana-dashboards
            readOnly: true
          - mountPath: /etc/grafana/provisioning/dashboards/gcp
            name: grafana-gcp-dashboards
            readOnly: true
          - mountPath: /etc/grafana/provisioning/dashboards/pinpon
            name: grafana-pinpon-dashboards
            readOnly: true
      volumes:
        - name: grafana-storage
          emptyDir: {}
        - name: grafana-datasources
          configMap:
              defaultMode: 420
              name: grafana-datasources
        - name: grafana-dashboards
          configMap:
              defaultMode: 420
              name: grafana-dashboards
        - name: grafana-gcp-dashboards
          configMap:
              defaultMode: 420
              name: grafana-dashboards
              items:
              - key: cloud-storage-monitoring.json
                path: cloud-storage-monitoring.json
              - key: network-tcp-load-balancer-monitoring.json
                path: network-tcp-load-balancer-monitoring.json
              - key: gce-network-monitoring.json
                path: gce-network-monitoring.json
              - key: firewall-insights-monitoring.json
                path: firewall-insights-monitoring.json
              - key: gce-vm-instance-monitoring.json
                path: gce-vm-instance-monitoring.json
        - name: grafana-pinpon-dashboards
          configMap:
              defaultMode: 420
              name: grafana-dashboards
              items:
              - key: pinpon-previous.json
                path: pinpon-previous.json
              - key: pinpon-stats.json
                path: pinpon.stats.json
